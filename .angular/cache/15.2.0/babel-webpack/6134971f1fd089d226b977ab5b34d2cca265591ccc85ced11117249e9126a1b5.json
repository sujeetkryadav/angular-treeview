{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nfunction TreeComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nconst _c0 = function (a0, a1) {\n  return {\n    \"right\": a0,\n    \"down\": a1\n  };\n};\nfunction TreeComponent_ng_template_2_ng_container_0_i_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"i\", 10);\n    i0.ɵɵlistener(\"click\", function TreeComponent_ng_template_2_ng_container_0_i_4_Template_i_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const item_r5 = i0.ɵɵnextContext().$implicit;\n      const ctx_r9 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r9.openChild($event, item_r5));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r5 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(1, _c0, !item_r5.isopen, item_r5.isopen));\n  }\n}\nfunction TreeComponent_ng_template_2_ng_container_0_ng_container_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nconst _c1 = function (a0) {\n  return {\n    list: a0\n  };\n};\nfunction TreeComponent_ng_template_2_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"li\", 4);\n    i0.ɵɵelementStart(2, \"li\", 5)(3, \"div\", 6);\n    i0.ɵɵlistener(\"dragstart\", function TreeComponent_ng_template_2_ng_container_0_Template_div_dragstart_3_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r14);\n      const item_r5 = restoredCtx.$implicit;\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r13.drag($event, item_r5));\n    });\n    i0.ɵɵtemplate(4, TreeComponent_ng_template_2_ng_container_0_i_4_Template, 1, 4, \"i\", 7);\n    i0.ɵɵelementStart(5, \"span\", 8);\n    i0.ɵɵlistener(\"click\", function TreeComponent_ng_template_2_ng_container_0_Template_span_click_5_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r14);\n      const item_r5 = restoredCtx.$implicit;\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r15.click($event, item_r5));\n    });\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"ul\", 9);\n    i0.ɵɵlistener(\"drop\", function TreeComponent_ng_template_2_ng_container_0_Template_ul_drop_7_listener($event) {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r16.drop($event, ctx_r16.eleID));\n    })(\"dragover\", function TreeComponent_ng_template_2_ng_container_0_Template_ul_dragover_7_listener($event) {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r17 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r17.allowDrop($event));\n    });\n    i0.ɵɵtemplate(8, TreeComponent_ng_template_2_ng_container_0_ng_container_8_Template, 1, 0, \"ng-container\", 1);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const item_r5 = ctx.$implicit;\n    const i_r6 = ctx.index;\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    const _r1 = i0.ɵɵreference(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"data-order\", i_r6);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"data-parent\", item_r5.id)(\"data-seq\", i_r6);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"id\", \"id\" + item_r5.id);\n    i0.ɵɵattribute(\"data-node\", item_r5.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", item_r5.children.length > 0);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r5.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"hidden\", !item_r5.isopen)(\"id\", ctx_r4.rootId + item_r5.id);\n    i0.ɵɵattribute(\"data-node-id\", item_r5.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r1)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(12, _c1, item_r5.children));\n  }\n}\nfunction TreeComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TreeComponent_ng_template_2_ng_container_0_Template, 9, 14, \"ng-container\", 3);\n  }\n  if (rf & 2) {\n    const list_r3 = ctx.list;\n    i0.ɵɵproperty(\"ngForOf\", list_r3);\n  }\n}\nexport class TreeComponent {\n  constructor() {\n    this.eleID = \"\";\n    this.parentId = 0;\n    this.children = [];\n    this.rootId = \"\";\n    this.openChild = ($event, item) => {\n      if (item.children && item.children.length > 0) item.isopen = !item.isopen;\n      $event.stopPropagation();\n    };\n    /**\n     * Find and remove element from list by id\n     * @param nodeArray\n     * @param id\n     * @returns\n     */\n    this.removeNodeById = (nodeArray, id) => {\n      return nodeArray.filter(node => {\n        if (node.id === id) {\n          return false;\n        } else if (node.children) {\n          node.children = this.removeNodeById(node.children, id);\n        }\n        return true;\n      });\n    };\n  }\n  ngOnInit() {\n    this.rootId = this.makeid(10);\n  }\n  click($event, item) {\n    console.log(\"Selected Item-->\", item);\n    $event.stopPropagation();\n  }\n  allowDrop(ev) {\n    document.querySelectorAll(\"li.re-order\").forEach(function (e) {\n      e[\"style\"].border = \"none\";\n      e[\"style\"].height = \"0px\";\n    });\n    if (ev.target.classList.contains(\"re-order\")) {\n      ev.target.style.borderBottom = \"2px solid blue\";\n      ev.target.style.height = \"1px\";\n    }\n    document.querySelectorAll(\"li.list-item\").forEach(function (e) {\n      e.children[0][\"style\"].border = \"1px solid transparent\";\n    });\n    if (ev.target.closest(\"li.list-item\") && !ev.target.classList.contains(\"re-order\")) {\n      ev.target.closest(\"li.list-item\").children[0].style.border = \"1px solid green\";\n    }\n    ev.preventDefault();\n  }\n  drag(ev, item) {\n    ev.dataTransfer.setData(\"text\", JSON.stringify(item));\n  }\n  drop(ev, id) {\n    document.querySelectorAll(\"li.list-item div\").forEach(function (e) {\n      e[\"style\"].border = \"1px solid transparent\";\n    });\n    document.querySelectorAll(\"li.re-order\").forEach(function (e) {\n      e[\"style\"].border = \"none\";\n      e[\"style\"].height = \"0px\";\n    });\n    if (ev.target.classList.contains(\"re-order\")) {\n      //Re-ordering\n      let parentNodeId = ev.target.closest(\"ul\").dataset.nodeId;\n      let nodeIndex = ev.target.dataset.order;\n      this.data = this.removeNodeById(this.data, JSON.parse(ev.dataTransfer.getData(\"text\")).id);\n      if (parentNodeId == 0) {\n        this.data.splice(nodeIndex, 0, JSON.parse(ev.dataTransfer.getData(\"text\")));\n      } else {\n        this.findAndReorder(this.data, parentNodeId, JSON.parse(ev.dataTransfer.getData(\"text\")), nodeIndex);\n      }\n      console.log(parentNodeId, nodeIndex);\n      console.log(\"reordering\");\n    } else {\n      let parentId = ev.target.closest(\"li\").dataset[\"parent\"];\n      let data = ev.dataTransfer.getData(\"text\");\n      let currentID = JSON.parse(data).id;\n      if (parentId != currentID) {\n        this.data = this.removeNodeById(this.data, currentID);\n        this.data = this.findAndAdd(this.data, parentId, JSON.parse(data));\n      }\n    }\n    console.log(\"updated dataset\", this.data);\n    ev.stopPropagation();\n  }\n  /**\n   * Find and reorder element as a child for parent id\n   * @param nodeArray\n   * @param id\n   * @returns\n   */\n  findAndReorder(data, id, item, index) {\n    for (let i = 0; i < data.length; i++) {\n      if (data[i].id == id) {\n        data[i].children.splice(index, 0, item);\n      } else {\n        this.findAndReorder(data[i].children, id, item, index);\n      }\n    }\n  }\n  /**\n   * Find and add element as a child for parent id\n   * @param nodeArray\n   * @param id\n   * @returns\n   */\n  findAndAdd(data, id, item) {\n    for (let i = 0; i < data.length; i++) {\n      if (data[i].id == id) {\n        data[i].children.push(item);\n      } else {\n        this.findAndAdd(data[i].children, id, item);\n      }\n    }\n    return data;\n  }\n  /**\n   * Description: This function is used to create a random name for id and name\n   * @param e: any\n   */\n  makeid(length) {\n    let result = \"\";\n    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    const charactersLength = characters.length;\n    let counter = 0;\n    while (counter < length) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n      counter += 1;\n    }\n    return result;\n  }\n}\nTreeComponent.ɵfac = function TreeComponent_Factory(t) {\n  return new (t || TreeComponent)();\n};\nTreeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TreeComponent,\n  selectors: [[\"app-tree\"]],\n  inputs: {\n    data: \"data\",\n    eleID: \"eleID\"\n  },\n  decls: 4,\n  vars: 6,\n  consts: [[3, \"id\", \"drop\", \"dragover\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [\"Recursion\", \"\"], [4, \"ngFor\", \"ngForOf\"], [1, \"re-order\", 2, \"height\", \"1px\"], [1, \"list-item\"], [\"draggable\", \"true\", 3, \"id\", \"dragstart\"], [\"class\", \"arrow\", 3, \"ngClass\", \"click\", 4, \"ngIf\"], [3, \"click\"], [3, \"hidden\", \"id\", \"drop\", \"dragover\"], [1, \"arrow\", 3, \"ngClass\", \"click\"]],\n  template: function TreeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ul\", 0);\n      i0.ɵɵlistener(\"drop\", function TreeComponent_Template_ul_drop_0_listener($event) {\n        return ctx.drop($event, ctx.eleID);\n      })(\"dragover\", function TreeComponent_Template_ul_dragover_0_listener($event) {\n        return ctx.allowDrop($event);\n      });\n      i0.ɵɵtemplate(1, TreeComponent_ng_container_1_Template, 1, 0, \"ng-container\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(2, TreeComponent_ng_template_2_Template, 1, 1, \"ng-template\", null, 2, i0.ɵɵtemplateRefExtractor);\n    }\n    if (rf & 2) {\n      const _r1 = i0.ɵɵreference(3);\n      i0.ɵɵproperty(\"id\", ctx.rootId);\n      i0.ɵɵattribute(\"data-node-id\", 0);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngTemplateOutlet\", _r1)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(4, _c1, ctx.data));\n    }\n  },\n  dependencies: [i1.NgClass, i1.NgForOf, i1.NgIf, i1.NgTemplateOutlet],\n  styles: [\"ul[_ngcontent-%COMP%] {\\n    padding-left: 20px;\\n}\\n\\nli[_ngcontent-%COMP%] {\\n    list-style: none;\\n    cursor: pointer;\\n\\n    padding: 4px;\\n}\\n\\nli.list-item[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:hover {\\n    background-color: rgb(0, 0, 0, .04);\\n}\\n\\n\\n\\nli[_ngcontent-%COMP%]   div[_ngcontent-%COMP%] {\\n\\n    padding: 10px;\\n}\\n\\n.arrow[_ngcontent-%COMP%] {\\n    border: solid black;\\n    border-width: 0 3px 3px 0;\\n    display: inline-block;\\n    padding: 3px;\\n    margin-right: 5px;\\n}\\n\\n.right[_ngcontent-%COMP%] {\\n    transform: rotate(-45deg);\\n    -webkit-transform: rotate(-45deg);\\n}\\n\\n.left[_ngcontent-%COMP%] {\\n    transform: rotate(135deg);\\n    -webkit-transform: rotate(135deg);\\n}\\n\\n.up[_ngcontent-%COMP%] {\\n    transform: rotate(-135deg);\\n    -webkit-transform: rotate(-135deg);\\n}\\n\\n.down[_ngcontent-%COMP%] {\\n    transform: rotate(45deg);\\n    -webkit-transform: rotate(45deg);\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvdHJlZXZpZXcvdHJlZS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGVBQWU7O0lBRWYsWUFBWTtBQUNoQjs7QUFFQTtJQUNJLG1DQUFtQztBQUN2Qzs7OztBQUlBOztJQUVJLGFBQWE7QUFDakI7O0FBRUE7SUFDSSxtQkFBbUI7SUFDbkIseUJBQXlCO0lBQ3pCLHFCQUFxQjtJQUNyQixZQUFZO0lBQ1osaUJBQWlCO0FBQ3JCOztBQUVBO0lBQ0kseUJBQXlCO0lBQ3pCLGlDQUFpQztBQUNyQzs7QUFFQTtJQUNJLHlCQUF5QjtJQUN6QixpQ0FBaUM7QUFDckM7O0FBRUE7SUFDSSwwQkFBMEI7SUFDMUIsa0NBQWtDO0FBQ3RDOztBQUVBO0lBQ0ksd0JBQXdCO0lBQ3hCLGdDQUFnQztBQUNwQyIsInNvdXJjZXNDb250ZW50IjpbInVsIHtcbiAgICBwYWRkaW5nLWxlZnQ6IDIwcHg7XG59XG5cbmxpIHtcbiAgICBsaXN0LXN0eWxlOiBub25lO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcblxuICAgIHBhZGRpbmc6IDRweDtcbn1cblxubGkubGlzdC1pdGVtIGRpdjpob3ZlciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDAsIDAsIDAsIC4wNCk7XG59XG5cblxuXG5saSBkaXYge1xuXG4gICAgcGFkZGluZzogMTBweDtcbn1cblxuLmFycm93IHtcbiAgICBib3JkZXI6IHNvbGlkIGJsYWNrO1xuICAgIGJvcmRlci13aWR0aDogMCAzcHggM3B4IDA7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIHBhZGRpbmc6IDNweDtcbiAgICBtYXJnaW4tcmlnaHQ6IDVweDtcbn1cblxuLnJpZ2h0IHtcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgtNDVkZWcpO1xuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoLTQ1ZGVnKTtcbn1cblxuLmxlZnQge1xuICAgIHRyYW5zZm9ybTogcm90YXRlKDEzNWRlZyk7XG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgxMzVkZWcpO1xufVxuXG4udXAge1xuICAgIHRyYW5zZm9ybTogcm90YXRlKC0xMzVkZWcpO1xuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoLTEzNWRlZyk7XG59XG5cbi5kb3duIHtcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSg0NWRlZyk7XG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSg0NWRlZyk7XG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["i0","TreeComponent","constructor","$event","item","children","length","isopen","stopPropagation","nodeArray","id","filter","node","removeNodeById","ngOnInit","rootId","makeid","click","console","log","allowDrop","ev","document","querySelectorAll","forEach","e","border","height","target","classList","contains","style","borderBottom","closest","preventDefault","drag","dataTransfer","setData","JSON","stringify","drop","parentNodeId","dataset","nodeId","nodeIndex","order","data","parse","getData","splice","findAndReorder","parentId","currentID","findAndAdd","index","i","push","result","characters","charactersLength","counter","charAt","Math","floor","random","selectors","inputs","eleID","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/rimjeet/sujeet/angular-treeview/src/app/treeview/tree.component.html","/Users/rimjeet/sujeet/angular-treeview/src/app/treeview/tree.component.ts"],"sourcesContent":["<!-- <ul (drop)=\"drop($event, eleID)\" (dragover)=\"allowDrop($event)\" [id]=\"eleID\">\n    <ng-container *ngFor=\"let item of data; let i = index\">\n        <li style=\"height: 1px;\" class=\"re-order\" [attr.data-order]=\"i\"></li>\n        <li [attr.data-parent]=\"item.id\" [attr.data-seq]=\"i\" class=\"list-item\">\n            <div (dragstart)=\"drag($event, item)\" draggable=\"true\" [id]=\"'id' + item.id\" [attr.data-node]=\"item.id\">\n                <i class=\"arrow\" [ngClass]=\"{'right':!item.isopen,'down':item.isopen}\" (click)=\"openChild($event, item)\"\n                    *ngIf=\"item.children.length > 0\"></i><span (click)=\"click($event, item)\">{{\n                    item.name\n                    }}k</span>\n            </div>\n            <app-tree [data]=\"item.children\" [hidden]=\"!item.isopen\" [eleID]=\"'tree' + i\"></app-tree>\n        </li>\n    </ng-container>\n</ul> -->\n<ul (drop)=\"drop($event, eleID)\" (dragover)=\"allowDrop($event)\" [id]=\"rootId\" [attr.data-node-id]=\"0\">\n    <ng-container *ngTemplateOutlet=\"Recursion; context: { list: data }\"></ng-container>\n</ul>\n<ng-template #Recursion let-list=\"list\">\n    <ng-container *ngFor=\"let item of list; let i = index\">\n        <li style=\"height: 1px;\" class=\"re-order\" [attr.data-order]=\"i\"></li>\n        <li [attr.data-parent]=\"item.id\" [attr.data-seq]=\"i\" class=\"list-item\">\n            <div (dragstart)=\"drag($event, item)\" draggable=\"true\" [id]=\"'id' + item.id\" [attr.data-node]=\"item.id\">\n                <i class=\"arrow\" [ngClass]=\"{'right':!item.isopen,'down':item.isopen}\" (click)=\"openChild($event, item)\"\n                    *ngIf=\"item.children.length > 0\"></i><span (click)=\"click($event, item)\">{{ item.name }}</span>\n            </div>\n            <ul [hidden]=\"!item.isopen\" [id]=\"rootId+item.id\" (drop)=\"drop($event, eleID)\"\n                (dragover)=\"allowDrop($event)\" [attr.data-node-id]=\"item.id\">\n                <ng-container *ngTemplateOutlet=\"Recursion; context: { list: item.children }\"></ng-container>\n            </ul>\n        </li>\n    </ng-container>\n</ng-template>","\nimport { Component, Input } from \"@angular/core\";\n\n@Component({\n    selector: \"app-tree\",\n    templateUrl: \"./tree.component.html\",\n    styleUrls: [\"./tree.component.css\"],\n})\nexport class TreeComponent {\n    @Input() data: any;\n    @Input() eleID: string = \"\";\n    parentId: any = 0;\n    currentData: any;\n    children = [];\n    rootId: string = \"\";\n    constructor() { }\n    ngOnInit() {\n        this.rootId = this.makeid(10);\n    }\n\n    openChild = ($event: any, item: any) => {\n        if (item.children && item.children.length > 0) item.isopen = !item.isopen;\n        $event.stopPropagation();\n    };\n    click($event: any, item: any) {\n        console.log(\"Selected Item-->\", item);\n        $event.stopPropagation();\n    }\n    allowDrop(ev: any) {\n        document.querySelectorAll(\"li.re-order\").forEach(function (e: any) {\n            e[\"style\"].border = \"none\";\n            e[\"style\"].height = \"0px\";\n        });\n        if (ev.target.classList.contains(\"re-order\")) {\n            ev.target.style.borderBottom = \"2px solid blue\";\n            ev.target.style.height = \"1px\";\n        }\n        document.querySelectorAll(\"li.list-item\").forEach(function (e: any) {\n            e.children[0][\"style\"].border = \"1px solid transparent\";\n        });\n        if (\n            ev.target.closest(\"li.list-item\") &&\n            !ev.target.classList.contains(\"re-order\")\n        ) {\n            ev.target.closest(\"li.list-item\").children[0].style.border =\n                \"1px solid green\";\n        }\n\n        ev.preventDefault();\n    }\n\n    drag(ev: any, item: any) {\n        ev.dataTransfer.setData(\"text\", JSON.stringify(item));\n    }\n\n    drop(ev: any, id: any) {\n        document.querySelectorAll(\"li.list-item div\").forEach(function (e: any) {\n            e[\"style\"].border = \"1px solid transparent\";\n        });\n        document.querySelectorAll(\"li.re-order\").forEach(function (e: any) {\n            e[\"style\"].border = \"none\";\n            e[\"style\"].height = \"0px\";\n        });\n\n        if (ev.target.classList.contains(\"re-order\")) {\n            //Re-ordering\n            let parentNodeId = ev.target.closest(\"ul\").dataset.nodeId;\n            let nodeIndex = ev.target.dataset.order;\n            this.data = this.removeNodeById(\n                this.data,\n                JSON.parse(ev.dataTransfer.getData(\"text\")).id\n            );\n            if (parentNodeId == 0) {\n                this.data.splice(\n                    nodeIndex,\n                    0,\n                    JSON.parse(ev.dataTransfer.getData(\"text\"))\n                );\n            } else {\n                this.findAndReorder(\n                    this.data,\n                    parentNodeId,\n                    JSON.parse(ev.dataTransfer.getData(\"text\")),\n                    nodeIndex\n                );\n            }\n            console.log(parentNodeId, nodeIndex);\n            console.log(\"reordering\");\n        } else {\n            let parentId = ev.target.closest(\"li\").dataset[\"parent\"];\n            let data = ev.dataTransfer.getData(\"text\");\n            let currentID = JSON.parse(data).id;\n            if (parentId != currentID) {\n                this.data = this.removeNodeById(this.data, currentID);\n                this.data = this.findAndAdd(this.data, parentId, JSON.parse(data));\n            }\n        }\n        console.log(\"updated dataset\", this.data);\n        ev.stopPropagation();\n    }\n\n    /**\n     * Find and reorder element as a child for parent id\n     * @param nodeArray\n     * @param id\n     * @returns\n     */\n    findAndReorder(data: any, id: any, item: any, index: number) {\n        for (let i = 0; i < data.length; i++) {\n            if (data[i].id == id) {\n                data[i].children.splice(index, 0, item);\n            } else {\n                this.findAndReorder(data[i].children, id, item, index);\n            }\n        }\n    }\n    /**\n     * Find and add element as a child for parent id\n     * @param nodeArray\n     * @param id\n     * @returns\n     */\n    findAndAdd(data: any, id: any, item: any) {\n        for (let i = 0; i < data.length; i++) {\n            if (data[i].id == id) {\n                data[i].children.push(item);\n            } else {\n                this.findAndAdd(data[i].children, id, item);\n            }\n        }\n        return data;\n    }\n    /**\n     * Find and remove element from list by id\n     * @param nodeArray\n     * @param id\n     * @returns\n     */\n    removeNodeById = (nodeArray: any, id: any) => {\n        return nodeArray.filter((node: any) => {\n            if (node.id === id) {\n                return false;\n            } else if (node.children) {\n                node.children = this.removeNodeById(node.children, id);\n            }\n            return true;\n        });\n    };\n    /**\n     * Description: This function is used to create a random name for id and name\n     * @param e: any\n     */\n    makeid(length: number) {\n        let result = \"\";\n        const characters =\n            \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n        const charactersLength = characters.length;\n        let counter = 0;\n        while (counter < length) {\n            result += characters.charAt(Math.floor(Math.random() * charactersLength));\n            counter += 1;\n        }\n        return result;\n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}